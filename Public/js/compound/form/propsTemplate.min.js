"undefined"!=typeof window.Compound&&(org.references.form.get.template.props=new org.interface({requires:{vue:!0,jquery:!0},elements:{vue:["#modal_edit_props_template"]},vue:{delimiters:["{","}"],el:"#modal_edit_props_template",data:{__editor:org.compound.editor.vue||Object,meta:{},fields:[],props:[],type:"update"},mounted:()=>{},methods:{open:function(a){this.fields=[],this.meta={},this.event=a,org.web.request("Compound/getTemplateProps",a).then(a=>{if(200==a.status){if("object"==typeof a.data.props&&0<Object.keys(a.data.props).length)for(const[b,c]of Object.entries(a.data.props))this.fields.push({name:b,value:c}),this.props[b]=c;tb_show("Edit props of template",`/?TB_inline&inlineId=modal_edit_props_template&width=${CONFIG.modal.width||600}&height=${CONFIG.modal.height||700}`)}else this.__editor.vue.ui.notify.notify(this,{text:"Request to server failed",type:"danger"})})},submit:function(){const a=org.web.request("Compound/updateTemplateProps",Object.assign(this.event,{props:this.props||[]}));a.then(()=>{this.__editor.updateMarkup().then(()=>{tb_remove()})})}}},ready:function(){}}));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RSxVQUFvQixDQUUxQixDQXpFc0QsQ0FBbEIsQyIsImZpbGUiOiJwcm9wc1RlbXBsYXRlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImlmICh0eXBlb2Ygd2luZG93LkNvbXBvdW5kICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICBvcmcucmVmZXJlbmNlcy5mb3JtLmdldC50ZW1wbGF0ZS5wcm9wcyA9IG5ldyBvcmcuaW50ZXJmYWNlKHtcbiAgICAgICAgcmVxdWlyZXM6IHtcbiAgICAgICAgICAgIHZ1ZTogdHJ1ZSxcbiAgICAgICAgICAgIGpxdWVyeTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBlbGVtZW50czoge1xuICAgICAgICAgICAgdnVlOiBbJyNtb2RhbF9lZGl0X3Byb3BzX3RlbXBsYXRlJ11cbiAgICAgICAgfSxcbiAgICAgICAgdnVlOiB7XG4gICAgICAgICAgICBkZWxpbWl0ZXJzOiBbJ3snLCAnfSddLFxuICAgICAgICAgICAgZWw6IFwiI21vZGFsX2VkaXRfcHJvcHNfdGVtcGxhdGVcIixcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBfX2VkaXRvcjogb3JnLmNvbXBvdW5kLmVkaXRvci52dWUgfHwgT2JqZWN0LFxuICAgICAgICAgICAgICAgIG1ldGE6IHt9LFxuICAgICAgICAgICAgICAgIGZpZWxkczogW10sXG4gICAgICAgICAgICAgICAgcHJvcHM6IFtdLFxuICAgICAgICAgICAgICAgIHR5cGU6ICd1cGRhdGUnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbW91bnRlZDogRXZlbnQgPT4ge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1ldGhvZHM6IHtcbiAgICAgICAgICAgICAgICBvcGVuOiBmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpZWxkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGEgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudCA9IGV2ZW50O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSByZXF1ZXN0XG4gICAgICAgICAgICAgICAgICAgIChvcmcud2ViLnJlcXVlc3QoJ0NvbXBvdW5kL2dldFRlbXBsYXRlUHJvcHMnLCBldmVudCkpLnRoZW4oRXZlbnQgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoRXZlbnQuc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgRXZlbnQuZGF0YS5wcm9wcyA9PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyhFdmVudC5kYXRhLnByb3BzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhFdmVudC5kYXRhLnByb3BzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWVsZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGJfc2hvdygnRWRpdCBwcm9wcyBvZiB0ZW1wbGF0ZScsIGAvP1RCX2lubGluZSZpbmxpbmVJZD1tb2RhbF9lZGl0X3Byb3BzX3RlbXBsYXRlJndpZHRoPSR7Q09ORklHLm1vZGFsLndpZHRoIHx8IDYwMH0maGVpZ2h0PSR7Q09ORklHLm1vZGFsLmhlaWdodCB8fCA3MDB9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX2VkaXRvci52dWUudWkubm90aWZ5Lm5vdGlmeSh0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdSZXF1ZXN0IHRvIHNlcnZlciBmYWlsZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGFuZ2VyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgc3VibWl0OiBmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBSZXF1ZXN0ID0gb3JnLndlYi5yZXF1ZXN0KCdDb21wb3VuZC91cGRhdGVUZW1wbGF0ZVByb3BzJywgT2JqZWN0LmFzc2lnbih0aGlzLmV2ZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wczogdGhpcy5wcm9wcyB8fCBbXVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgUmVxdWVzdC50aGVuKEV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19lZGl0b3IudXBkYXRlTWFya3VwKCkudGhlbihFdmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGJfcmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlYWR5OiBmdW5jdGlvbiAoRXZlbnQsICQpIHtcblxuICAgICAgICB9XG4gICAgfSk7XG59Il19