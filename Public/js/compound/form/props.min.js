"undefined"!=typeof window.Compound&&(org.references.form.get.component.props=new org.interface({requires:{vue:!0,jquery:!0},elements:{vue:["#modal_edit_props"]},vue:{delimiters:["{","}"],el:"#modal_edit_props",data:{__editor:org.compound.editor.vue||Object,meta:{},fields:[],component:[],props:[],type:"update"},mounted:()=>{},methods:{open:function(a){this.fields=[],this.meta={},this.event=a,org.web.request("Compound/getProps",a).then(a=>{if(200==a.status){if("object"==typeof a.data.props&&0<Object.keys(a.data.props).length)for(const[b,c]of Object.entries(a.data.props))this.fields.push({name:b,value:c}),this.props[b]=c;"object"==typeof a.data.meta&&(this.meta=a.data.meta),tb_show("Edit props of component",`/?TB_inline&inlineId=modal_edit_props&width=${CONFIG.modal.width||600}&height=${CONFIG.modal.height||700}`)}else this.__editor.vue.ui.notify.notify(this,{text:"Request to server failed",type:"danger"})})},submit:function(){const a=org.web.request("Compound/updateProps",Object.assign(this.event,{type:this.type},{props:this.props||[]}));a.then(()=>{this.__editor.updateMarkup().then(()=>{tb_remove()})})}}},ready:function(){}}));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aEIsQ0FNQSxDQUFPLENBQUMsSUFBUixDQUFhLElBQVMsQ0FDbEIsS0FBSyxRQUFMLENBQWMsWUFBZCxHQUE2QixJQUE3QixDQUFrQyxJQUFTLENBQ3ZDLFNBQVMsRUFDWixDQUZELENBR0gsQ0FKRCxDQU1ILENBM0RJLENBYlIsQ0FSbUQsQ0FvRnhELEtBQUssQ0FBRSxVQUFvQixDQUUxQixDQXRGdUQsQ0FBbEIsQyIsImZpbGUiOiJwcm9wcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpZiAodHlwZW9mIHdpbmRvdy5Db21wb3VuZCAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgb3JnLnJlZmVyZW5jZXMuZm9ybS5nZXQuY29tcG9uZW50LnByb3BzID0gbmV3IG9yZy5pbnRlcmZhY2Uoe1xuICAgICAgICByZXF1aXJlczoge1xuICAgICAgICAgICAgdnVlOiB0cnVlLFxuICAgICAgICAgICAganF1ZXJ5OiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgICAgICB2dWU6IFsnI21vZGFsX2VkaXRfcHJvcHMnXVxuICAgICAgICB9LFxuICAgICAgICB2dWU6IHtcbiAgICAgICAgICAgIGRlbGltaXRlcnM6IFsneycsICd9J10sXG4gICAgICAgICAgICBlbDogXCIjbW9kYWxfZWRpdF9wcm9wc1wiLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIF9fZWRpdG9yOiBvcmcuY29tcG91bmQuZWRpdG9yLnZ1ZSB8fCBPYmplY3QsXG4gICAgICAgICAgICAgICAgbWV0YToge30sXG4gICAgICAgICAgICAgICAgZmllbGRzOiBbXSxcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IFtdLFxuICAgICAgICAgICAgICAgIHByb3BzOiBbXSxcbiAgICAgICAgICAgICAgICB0eXBlOiAndXBkYXRlJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1vdW50ZWQ6IEV2ZW50ID0+IHtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtZXRob2RzOiB7XG4gICAgICAgICAgICAgICAgb3BlbjogZnVuY3Rpb24gKGV2ZW50KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWVsZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhID0ge307XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnQgPSBldmVudDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgcmVxdWVzdFxuICAgICAgICAgICAgICAgICAgICAob3JnLndlYi5yZXF1ZXN0KCdDb21wb3VuZC9nZXRQcm9wcycsIGV2ZW50KSkudGhlbihFdmVudCA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChFdmVudC5zdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBFdmVudC5kYXRhLnByb3BzID09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKEV2ZW50LmRhdGEucHJvcHMpLmxlbmd0aCA+IDApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoRXZlbnQuZGF0YS5wcm9wcykpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWVsZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzW25hbWVdID0gdmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBFdmVudC5kYXRhLm1ldGEgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhID0gRXZlbnQuZGF0YS5tZXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRiX3Nob3coJ0VkaXQgcHJvcHMgb2YgY29tcG9uZW50JywgYC8/VEJfaW5saW5lJmlubGluZUlkPW1vZGFsX2VkaXRfcHJvcHMmd2lkdGg9JHtDT05GSUcubW9kYWwud2lkdGggfHwgNjAwfSZoZWlnaHQ9JHtDT05GSUcubW9kYWwuaGVpZ2h0IHx8IDcwMH1gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19lZGl0b3IudnVlLnVpLm5vdGlmeS5ub3RpZnkodGhpcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnUmVxdWVzdCB0byBzZXJ2ZXIgZmFpbGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RhbmdlcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHN1Ym1pdDogZnVuY3Rpb24gKGV2ZW50KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgUmVxdWVzdCA9IG9yZy53ZWIucmVxdWVzdCgnQ29tcG91bmQvdXBkYXRlUHJvcHMnLCBPYmplY3QuYXNzaWduKHRoaXMuZXZlbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZVxuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wczogdGhpcy5wcm9wcyB8fCBbXVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgUmVxdWVzdC50aGVuKEV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19lZGl0b3IudXBkYXRlTWFya3VwKCkudGhlbihFdmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGJfcmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlYWR5OiBmdW5jdGlvbiAoRXZlbnQsICQpIHtcblxuICAgICAgICB9XG4gICAgfSlcbn0iXX0=