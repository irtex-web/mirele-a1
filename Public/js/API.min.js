var $exports={};class __project{constructor(){this.$export={},this.$declare={}}export(a="",b){if(!(a in this.$export))return this.$export[a]=b,b;throw`Component '${a}' has already been exported and cannot be overwritten.`}import(a=""){if(a in this.$export)return this.$export[a];throw`Component '${a}' is not registered in the system and cannot be imported.`}declare(a="",b){if(!(a in this.$declare))return this.$declare[a]=b,b;throw`Object '${a}' has already been declared and cannot be overwritten.`}}const Project=new __project;class Interface{constructor(a={}){if("requires"in a){if("vue"in a.requires&&!0===a.requires.vue&&"function"!=typeof Vue)return;if("jquery"in a.requires&&!0===a.requires.vue&&"function"!=typeof jQuery)return}jQuery(document).ready(b=>{if("ready"in a&&(this.ready=a.ready(b,jQuery)),"vue"in a){if("elements"in a&&a.elements.vue)for(const[b,c]of Object.entries(a.elements.vue))if(!jQuery(c).length)return;"vue"in a&&(this.vue=new Vue(a.vue))}if("mounted"in a)for(const[c,d]of Object.entries(a.mounted))jQuery(c).length&&(this.mounted=d(b,$,a.instances))})}}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFQSS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxHQUFJLENBQUEsUUFBUSxDQUFHLEVBQWYsQ0FFQSxLQUFNLENBQUEsU0FBVSxDQUVaLFdBQVcsRUFBRyxDQUNWLEtBQUssT0FBTCxDQUFlLEVBREwsQ0FFVixLQUFLLFFBQUwsQ0FBZ0IsRUFDbkIsQ0FFRCxNQUFNLENBQUMsQ0FBSSxDQUFHLEVBQVIsQ0FBWSxDQUFaLENBQW9CLENBQ3RCLEdBQUksRUFBRSxDQUFJLEdBQUksTUFBSyxPQUFmLENBQUosQ0FFSSxNQURBLE1BQUssT0FBTCxDQUFhLENBQWIsRUFBcUIsQ0FDckIsQ0FBTyxDQUFQLENBRUEsS0FBTyxjQUFhLENBQUssd0RBRWhDLENBRUQsTUFBTSxDQUFDLENBQUksQ0FBRyxFQUFSLENBQVksQ0FDZCxHQUFJLENBQUksR0FBSSxNQUFLLE9BQWpCLENBQ0ksTUFBTyxNQUFLLE9BQUwsQ0FBYSxDQUFiLENBQVAsQ0FFQSxLQUFPLGNBQWEsQ0FBSywyREFFaEMsQ0FFRCxPQUFPLENBQUMsQ0FBSSxDQUFHLEVBQVIsQ0FBWSxDQUFaLENBQW9CLENBQ3ZCLEdBQUksRUFBRSxDQUFJLEdBQUksTUFBSyxRQUFmLENBQUosQ0FFSSxNQURBLE1BQUssUUFBTCxDQUFjLENBQWQsRUFBc0IsQ0FDdEIsQ0FBTyxDQUFQLENBRUEsS0FBTyxXQUFVLENBQUssd0RBRTdCLENBL0JXLENBbUNoQixLQUFNLENBQUEsT0FBTyxDQUFHLEdBQUksQ0FBQSxTQUFwQixDQUVBLEtBQU0sQ0FBQSxTQUFVLENBRVosV0FBVyxDQUFDLENBQUksQ0FBRyxFQUFSLENBQVksQ0FJbkIsR0FBSSxZQUFjLENBQUEsQ0FBbEIsQ0FBd0IsQ0FHcEIsR0FBSSxPQUFTLENBQUEsQ0FBSSxDQUFDLFFBQWQsRUFBMEIsS0FBQSxDQUFJLENBQUMsUUFBTCxDQUFjLEdBQTVDLEVBQ3VCLFVBQWYsUUFBTyxDQUFBLEdBRGYsQ0FFUSxPQUtSLEdBQUksVUFBWSxDQUFBLENBQUksQ0FBQyxRQUFqQixFQUE2QixLQUFBLENBQUksQ0FBQyxRQUFMLENBQWMsR0FBL0MsRUFDMEIsVUFBbEIsUUFBTyxDQUFBLE1BRGYsQ0FFUSxNQUlYLENBR0QsTUFBTSxDQUFDLFFBQUQsQ0FBTixDQUFpQixLQUFqQixDQUF1QixDQUFJLEVBQUksQ0FPM0IsR0FMSSxTQUFXLENBQUEsQ0FLZixHQUpJLEtBQUssS0FBTCxDQUFhLENBQUksQ0FBQyxLQUFMLENBQVcsQ0FBWCxDQUFpQixNQUFqQixDQUlqQixFQUFJLE9BQVMsQ0FBQSxDQUFiLENBQW1CLENBR2YsR0FBSSxZQUFjLENBQUEsQ0FBZCxFQUFzQixDQUFJLENBQUMsUUFBTCxDQUFjLEdBQXhDLENBQ0ksSUFBSyxLQUFNLENBQUMsQ0FBRCxDQUFXLENBQVgsQ0FBWCxFQUFrQyxDQUFBLE1BQU0sQ0FBQyxPQUFQLENBQWUsQ0FBSSxDQUFDLFFBQUwsQ0FBYyxHQUE3QixDQUFsQyxDQUNJLEdBQUksQ0FBQyxNQUFNLENBQUMsQ0FBRCxDQUFOLENBQWdCLE1BQXJCLENBQ0ksT0FNUixPQUFTLENBQUEsQ0FaRSxHQWFYLEtBQUssR0FBTCxDQUFXLEdBQUksQ0FBQSxHQUFKLENBQVEsQ0FBSSxDQUFDLEdBQWIsQ0FiQSxDQWdCbEIsQ0FHRCxHQUFJLFdBQWEsQ0FBQSxDQUFqQixDQUNJLElBQUssS0FBTSxDQUFDLENBQUQsQ0FBVSxDQUFWLENBQVgsRUFBa0MsQ0FBQSxNQUFNLENBQUMsT0FBUCxDQUFlLENBQUksQ0FBQyxPQUFwQixDQUFsQyxDQUNRLE1BQU0sQ0FBQyxDQUFELENBQU4sQ0FBZ0IsTUFEeEIsR0FFUSxLQUFLLE9BQUwsQ0FBZSxDQUFRLENBQUMsQ0FBRCxDQUFPLENBQVAsQ0FBVSxDQUFJLENBQUMsU0FBZixDQUYvQixDQU9QLENBbENELENBb0NILENBN0RXIiwiZmlsZSI6IkFQSS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJGV4cG9ydHMgPSB7fTtcblxuY2xhc3MgX19wcm9qZWN0IHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLiRleHBvcnQgPSB7fTtcbiAgICAgICAgdGhpcy4kZGVjbGFyZSA9IHt9O1xuICAgIH1cblxuICAgIGV4cG9ydChuYW1lID0gJycsIG9iamVjdCkge1xuICAgICAgICBpZiAoIShuYW1lIGluIHRoaXMuJGV4cG9ydCkpIHtcbiAgICAgICAgICAgIHRoaXMuJGV4cG9ydFtuYW1lXSA9IG9iamVjdDtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBgQ29tcG9uZW50ICcke25hbWV9JyBoYXMgYWxyZWFkeSBiZWVuIGV4cG9ydGVkIGFuZCBjYW5ub3QgYmUgb3ZlcndyaXR0ZW4uYDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGltcG9ydChuYW1lID0gJycpIHtcbiAgICAgICAgaWYgKG5hbWUgaW4gdGhpcy4kZXhwb3J0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kZXhwb3J0W25hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgYENvbXBvbmVudCAnJHtuYW1lfScgaXMgbm90IHJlZ2lzdGVyZWQgaW4gdGhlIHN5c3RlbSBhbmQgY2Fubm90IGJlIGltcG9ydGVkLmA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWNsYXJlKG5hbWUgPSAnJywgb2JqZWN0KSB7XG4gICAgICAgIGlmICghKG5hbWUgaW4gdGhpcy4kZGVjbGFyZSkpIHtcbiAgICAgICAgICAgIHRoaXMuJGRlY2xhcmVbbmFtZV0gPSBvYmplY3Q7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgYE9iamVjdCAnJHtuYW1lfScgaGFzIGFscmVhZHkgYmVlbiBkZWNsYXJlZCBhbmQgY2Fubm90IGJlIG92ZXJ3cml0dGVuLmA7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuY29uc3QgUHJvamVjdCA9IG5ldyBfX3Byb2plY3QoKTtcblxuY2xhc3MgSW50ZXJmYWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgPSB7fSkge1xuXG4gICAgICAgIC8vIENoZWNraW5nIHRvIHNlZSBpZiB0aGVyZVxuICAgICAgICAvLyBhcmUgcmVxdWVzdHMgdG8gY2hlY2sgZXhpc3RpbmcgaW5zdGFuY2VzXG4gICAgICAgIGlmICgncmVxdWlyZXMnIGluIGRhdGEpIHtcblxuICAgICAgICAgICAgLy8gQ2hlY2tpbmcgZm9yIGEgVlVFIGluc3RhbmNlXG4gICAgICAgICAgICBpZiAoJ3Z1ZScgaW4gZGF0YS5yZXF1aXJlcyAmJiBkYXRhLnJlcXVpcmVzLnZ1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgVnVlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoZWNraW5nIGZvciBhIGpRdWVyeSBpbnN0YW5jZVxuICAgICAgICAgICAgaWYgKCdqcXVlcnknIGluIGRhdGEucmVxdWlyZXMgJiYgZGF0YS5yZXF1aXJlcy52dWUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGpRdWVyeSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICAvLyBQZXJmb3JtaW5nIGRvY3VtZW50IGF2YWlsYWJpbGl0eSBmdW5jdGlvbnNcbiAgICAgICAgalF1ZXJ5KGRvY3VtZW50KS5yZWFkeShpbml0ID0+IHtcblxuICAgICAgICAgICAgaWYgKCdyZWFkeScgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVhZHkgPSBkYXRhLnJlYWR5KGluaXQsIGpRdWVyeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoZWNraW5nIGZvciBpbnN0YW5jZXMgb2YgRE9NIGVsZW1lbnRzXG4gICAgICAgICAgICBpZiAoJ3Z1ZScgaW4gZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2tpbmcgZm9yIGluc3RhbmNlcyBvZiBET00gZWxlbWVudHNcbiAgICAgICAgICAgICAgICBpZiAoJ2VsZW1lbnRzJyBpbiBkYXRhICYmIGRhdGEuZWxlbWVudHMudnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2FyZ3VtZW50LCBlbGVtZW50XSBvZiBPYmplY3QuZW50cmllcyhkYXRhLmVsZW1lbnRzLnZ1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghalF1ZXJ5KGVsZW1lbnQpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIENyZWF0aW5nIGEgVlVFIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgaWYgKCd2dWUnIGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52dWUgPSBuZXcgVnVlKGRhdGEudnVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWF0Y2hpbmcgRE9NIG9iamVjdHMgd2l0aCBwYWdlIG1vdW50IGZ1bmN0aW9uc1xuICAgICAgICAgICAgaWYgKCdtb3VudGVkJyBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZWxlbWVudCwgYXJndW1lbnRdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEubW91bnRlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGpRdWVyeShlbGVtZW50KS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW91bnRlZCA9IGFyZ3VtZW50KGluaXQsICQsIGRhdGEuaW5zdGFuY2VzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcblxuICAgIH1cbn0iXX0=