Application.Components.Compound.EditComponent=Vue.component("modal-edit-component",{data:function(){return{component:null,attributes:{},editor:Application.Modules.Compound.vue,tabs:{props:{title:"Props"},design:{title:"Design"},manage:{title:"Manage"}},activeTab:"props",availableUpdate:!0}},components:Application.Modules.CompoundPrototypes||{},methods:{update:function(){this.availableUpdate=!1,new Application.Postman({method:"CompoundPrivate/component",body:{PageID:this.$parent.props.PageID,Area:this.$parent.props.Area,Template:this.$parent.props.Template,Component:this.$parent.props.Component,Index:this.$parent.props.Index,type:"UPDATE",UPDATE:this.attributes}}).then(()=>{}).catch(()=>{}).finally(()=>{this.availableUpdate=!0,this.$parent.close(),this.editor.update()})},prototype:function(a){return Application.Modules.CompoundPrototypes[a]||Application.Modules.CompoundPrototypes["default"]||!1}},template:`
        <div>
            <div class="__compound_modal_tabs_body">
                <a href="#" :class="['__compound_modal_tabs_tab', index == activeTab ? 'current' : '']" v-for="(tab, index) in tabs" v-text="tab.title" @click.prevent="activeTab = index"></a>
            </div>
    
            <div class="__compound_modal_body">
               
                <div class="margin-buttom-4" v-for="(attr, name) in this.$parent.props.Document[this.$parent.props.Index][this.$parent.props.Template][this.$parent.props.Area][this.$parent.props.Component].attributes">
                    <component v-bind:is="prototype(name)" :name="name" :value="attr"></component>     
                </div>
                  
            </div>
            
            <div class="__compound_modal_footer">
                <a :class="['button', 'button-primary', 'right', availableUpdate === false ? 'disabled' : '']" @click="update">Update</a>
            </div>
                      
        </div> 
    `});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkVkaXRDb21wb25lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDLFVBQVosQ0FBdUIsUUFBdkIsQ0FBZ0MsYUFBaEMsQ0FBZ0QsR0FBRyxDQUFDLFNBQUosQ0FBYyxzQkFBZCxDQUFzQyxDQUNsRixJQUFJLENBQUUsVUFBWSxDQUNkLE1BQU8sQ0FDSCxTQUFTLENBQUUsSUFEUixDQUVILFVBQVUsQ0FBRSxFQUZULENBR0gsTUFBTSxDQUFFLFdBQVcsQ0FBQyxPQUFaLENBQW9CLFFBQXBCLENBQTZCLEdBSGxDLENBSUgsSUFBSSxDQUFFLENBQ0YsS0FBSyxDQUFFLENBQ0gsS0FBSyxDQUFFLE9BREosQ0FETCxDQUlGLE1BQU0sQ0FBRSxDQUNKLEtBQUssQ0FBRSxRQURILENBSk4sQ0FPRixNQUFNLENBQUUsQ0FDSixLQUFLLENBQUUsUUFESCxDQVBOLENBSkgsQ0FlSCxTQUFTLENBQUUsT0FmUixDQWdCSCxlQUFlLEdBaEJaLENBa0JWLENBcEJpRixDQXFCbEYsVUFBVSxDQUFFLFdBQVcsQ0FBQyxPQUFaLENBQW9CLGtCQUFwQixFQUEwQyxFQXJCNEIsQ0FzQmxGLE9BQU8sQ0FBRSxDQUNMLE1BQU0sQ0FBRSxVQUFpQixDQUVyQixLQUFLLGVBQUwsR0FGcUIsQ0FJckIsR0FBSSxDQUFBLFdBQVcsQ0FBQyxPQUFoQixDQUF3QixDQUNwQixNQUFNLENBQUUsMkJBRFksQ0FFcEIsSUFBSSxDQUFFLENBQ0YsTUFBTSxDQUFFLEtBQUssT0FBTCxDQUFhLEtBQWIsQ0FBbUIsTUFEekIsQ0FFRixJQUFJLENBQUUsS0FBSyxPQUFMLENBQWEsS0FBYixDQUFtQixJQUZ2QixDQUdGLFFBQVEsQ0FBRSxLQUFLLE9BQUwsQ0FBYSxLQUFiLENBQW1CLFFBSDNCLENBSUYsU0FBUyxDQUFFLEtBQUssT0FBTCxDQUFhLEtBQWIsQ0FBbUIsU0FKNUIsQ0FLRixLQUFLLENBQUUsS0FBSyxPQUFMLENBQWEsS0FBYixDQUFtQixLQUx4QixDQU1GLElBQUksQ0FBRSxRQU5KLENBT0YsTUFBTSxDQUFFLEtBQUssVUFQWCxDQUZjLENBQXhCLEVBV0csSUFYSCxDQVdRLElBQU8sQ0FFZCxDQWJELEVBYUcsS0FiSCxDQWFTLElBQU8sQ0FFZixDQWZELEVBZUcsT0FmSCxDQWVXLElBQU8sQ0FFZCxLQUFLLGVBQUwsR0FGYyxDQUlkLEtBQUssT0FBTCxDQUFhLEtBQWIsRUFKYyxDQUtkLEtBQUssTUFBTCxDQUFZLE1BQVosRUFFSCxDQXRCRCxDQXVCSCxDQTVCSSxDQThCTCxTQUFTLENBQUUsU0FBVSxDQUFWLENBQWdCLENBQ3ZCLE1BQU8sQ0FBQSxXQUFXLENBQUMsT0FBWixDQUFvQixrQkFBcEIsQ0FBdUMsQ0FBdkMsR0FBZ0QsV0FBVyxDQUFDLE9BQVosQ0FBb0Isa0JBQXBCLENBQXVDLFNBQXZDLENBQWhELElBQ1YsQ0FoQ0ksQ0F0QnlFLENBd0RsRixRQUFRLENBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0F4RHVFLENBQXRDLEMiLCJmaWxlIjoiRWRpdENvbXBvbmVudC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJBcHBsaWNhdGlvbi5Db21wb25lbnRzLkNvbXBvdW5kLkVkaXRDb21wb25lbnQgPSBWdWUuY29tcG9uZW50KCdtb2RhbC1lZGl0LWNvbXBvbmVudCcsIHtcbiAgICBkYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb21wb25lbnQ6IG51bGwsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgICAgICAgIGVkaXRvcjogQXBwbGljYXRpb24uTW9kdWxlcy5Db21wb3VuZC52dWUsXG4gICAgICAgICAgICB0YWJzOiB7XG4gICAgICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdQcm9wcydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRlc2lnbjoge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0Rlc2lnbidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1hbmFnZToge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ01hbmFnZSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWN0aXZlVGFiOiAncHJvcHMnLFxuICAgICAgICAgICAgYXZhaWxhYmxlVXBkYXRlOiB0cnVlXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNvbXBvbmVudHM6IEFwcGxpY2F0aW9uLk1vZHVsZXMuQ29tcG91bmRQcm90b3R5cGVzIHx8IHt9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoZXZlbnQpIHtcblxuICAgICAgICAgICAgdGhpcy5hdmFpbGFibGVVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgICAgICAgbmV3IEFwcGxpY2F0aW9uLlBvc3RtYW4oe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0NvbXBvdW5kUHJpdmF0ZS9jb21wb25lbnQnLFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAgICAgUGFnZUlEOiB0aGlzLiRwYXJlbnQucHJvcHMuUGFnZUlELFxuICAgICAgICAgICAgICAgICAgICBBcmVhOiB0aGlzLiRwYXJlbnQucHJvcHMuQXJlYSxcbiAgICAgICAgICAgICAgICAgICAgVGVtcGxhdGU6IHRoaXMuJHBhcmVudC5wcm9wcy5UZW1wbGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgQ29tcG9uZW50OiB0aGlzLiRwYXJlbnQucHJvcHMuQ29tcG9uZW50LFxuICAgICAgICAgICAgICAgICAgICBJbmRleDogdGhpcy4kcGFyZW50LnByb3BzLkluZGV4LFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnVVBEQVRFJyxcbiAgICAgICAgICAgICAgICAgICAgVVBEQVRFOiB0aGlzLmF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSkudGhlbigoZSkgPT4ge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSkuY2F0Y2goKGUpID0+IHtcblxuICAgICAgICAgICAgfSkuZmluYWxseSgoZSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5hdmFpbGFibGVVcGRhdGUgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy4kcGFyZW50LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IudXBkYXRlKCk7XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgcHJvdG90eXBlOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIEFwcGxpY2F0aW9uLk1vZHVsZXMuQ29tcG91bmRQcm90b3R5cGVzW25hbWVdIHx8IEFwcGxpY2F0aW9uLk1vZHVsZXMuQ29tcG91bmRQcm90b3R5cGVzWydkZWZhdWx0J10gfHwgZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiX19jb21wb3VuZF9tb2RhbF90YWJzX2JvZHlcIj5cbiAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIDpjbGFzcz1cIlsnX19jb21wb3VuZF9tb2RhbF90YWJzX3RhYicsIGluZGV4ID09IGFjdGl2ZVRhYiA/ICdjdXJyZW50JyA6ICcnXVwiIHYtZm9yPVwiKHRhYiwgaW5kZXgpIGluIHRhYnNcIiB2LXRleHQ9XCJ0YWIudGl0bGVcIiBAY2xpY2sucHJldmVudD1cImFjdGl2ZVRhYiA9IGluZGV4XCI+PC9hPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiX19jb21wb3VuZF9tb2RhbF9ib2R5XCI+XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWFyZ2luLWJ1dHRvbS00XCIgdi1mb3I9XCIoYXR0ciwgbmFtZSkgaW4gdGhpcy4kcGFyZW50LnByb3BzLkRvY3VtZW50W3RoaXMuJHBhcmVudC5wcm9wcy5JbmRleF1bdGhpcy4kcGFyZW50LnByb3BzLlRlbXBsYXRlXVt0aGlzLiRwYXJlbnQucHJvcHMuQXJlYV1bdGhpcy4kcGFyZW50LnByb3BzLkNvbXBvbmVudF0uYXR0cmlidXRlc1wiPlxuICAgICAgICAgICAgICAgICAgICA8Y29tcG9uZW50IHYtYmluZDppcz1cInByb3RvdHlwZShuYW1lKVwiIDpuYW1lPVwibmFtZVwiIDp2YWx1ZT1cImF0dHJcIj48L2NvbXBvbmVudD4gICAgIFxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIl9fY29tcG91bmRfbW9kYWxfZm9vdGVyXCI+XG4gICAgICAgICAgICAgICAgPGEgOmNsYXNzPVwiWydidXR0b24nLCAnYnV0dG9uLXByaW1hcnknLCAncmlnaHQnLCBhdmFpbGFibGVVcGRhdGUgPT09IGZhbHNlID8gJ2Rpc2FibGVkJyA6ICcnXVwiIEBjbGljaz1cInVwZGF0ZVwiPlVwZGF0ZTwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICA8L2Rpdj4gXG4gICAgYFxufSk7Il19